<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on pronvis.site</title>
        <link>/posts/</link>
        <description>Recent content in Posts on pronvis.site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#39;https://creativecommons.org/licenses/by/4.0/&#39; target=&#39;_blank&#39;&gt;CC-BY 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 10 May 2020 17:32:59 +0300</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>under construction</title>
            <link>/under-construction/</link>
            <pubDate>Sun, 10 May 2020 17:32:59 +0300</pubDate>
            
            <guid>/under-construction/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>Sum and Product Puzzle solution</title>
            <link>/sum-and-product-puzzle-solution/</link>
            <pubDate>Fri, 08 May 2020 12:17:26 +0300</pubDate>
            
            <guid>/sum-and-product-puzzle-solution/</guid>
            <description>This is a translation of my article in a russian IT site
 Puzzle Solution  Puzzle Two integers, A and B, each between 2 and 100 inclusive, have been chosen. The product, A×B, is given to mathematician Dr. P. The sum, A+B, is given to mathematician Dr. S. They each know the range of numbers. Their conversation is as follows:
P: &amp;quot;I don&#39;t have the foggiest idea what your sum is, S.</description>
            <content type="html"><![CDATA[<p>This is a translation of <a href="https://habr.com/ru/post/378593/">my article</a> in a <a href="https://habr.com">russian IT site</a></p>
<ul>
<li><a href="#Puzzle">Puzzle</a></li>
<li><a href="#Solution">Solution</a></li>
</ul>
<h2 id="Puzzle">Puzzle</h2>
<p>Two integers, A and B, each between 2 and 100 inclusive, have been chosen.
The product, A×B, is given to mathematician Dr. P. The sum, A+B, is given to mathematician Dr. S. They each know the range of numbers. Their conversation is as follows:</p>
<pre><code>P: &quot;I don't have the foggiest idea what your sum is, S.&quot;
S: &quot;That's no news to me, P. I already knew that you didn't know. I don't know either.&quot;
P: &quot;Aha, NOW I know what your sum must be, S!&quot;
S: &quot;And likewise P, I have figured out your product!!&quot;
</code></pre><p>What are the numbers?</p>
<h2 id="Solution">Solution</h2>
<p>I solve this task with logic and mind brute force :) Looks like there is no other ways to solve it. Whilst it is easy to find first solution, unknown is it only one on specified range. So I decided to solve it with scala lazy collection. Lets start!</p>
<p>We will move by mathematicians messages one by one and check what information it gives and write related function:</p>
<ol>
<li><code>Dr. P</code> said that he have no ideas what numbers are. It tells us that at least one integer is not prime. Otherwise product factorize in only one way. Lets create stream of prime numbers:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">lazy</span> <span style="color:#66d9ef">val</span> primes<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Stream</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">#</span><span style="color:#66d9ef">:</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Stream.from</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">3</span><span style="color:#f92672">)</span><span style="color:#66d9ef">.filter</span><span style="color:#f92672">(</span><span style="color:#66d9ef">i</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">isPrime</span><span style="color:#f92672">(</span><span style="color:#66d9ef">i</span><span style="color:#f92672">))</span>

  <span style="color:#66d9ef">def</span> isPrime<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    primes<span style="color:#f92672">.</span>takeWhile<span style="color:#f92672">(</span>i <span style="color:#66d9ef">=&gt;</span> i<span style="color:#f92672">*</span>i <span style="color:#f92672">&lt;=</span> x<span style="color:#f92672">).</span>forall <span style="color:#f92672">{</span> k <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">%</span> k <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>
</code></pre></div><p>Simple - next integer is prime only if it is not divided without reminder by all of already known prime numbers. Next we can create stream of possible <code>Dr. P</code> numbers without prime number products (6, 15, &hellip;), but not now.</p>
<ol start="2">
<li>Next <code>Dr. S</code> tells that he <strong>knows</strong> that <code>Dr. P</code> don&rsquo;t know chosen integers. How he can knew that? Looks like his number (sum of chosen integers) decompose to pairs of sum in a such way that there is no pairs with both numbers is prime. Example: <code>Dr. S</code> number is 7, we can decompose it to pairs of sum (5+2), (3+4) - look at 5+2, they are both prime, so can not be chose. Now we can get list of all possible <code>Dr. S</code> integers:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">//decompose integer to pairs of sum
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">def</span> expandBySum<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">)]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@tailrec</span> <span style="color:#66d9ef">def</span> helper<span style="color:#f92672">(</span>accum<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">)],</span> i<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> j<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">)]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> j<span style="color:#f92672">)</span> accum
      <span style="color:#66d9ef">else</span> helper<span style="color:#f92672">((</span>i<span style="color:#f92672">,</span> j<span style="color:#f92672">)</span> <span style="color:#66d9ef">:</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">accum</span><span style="color:#f92672">,</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
    <span style="color:#f92672">}</span>
    helper<span style="color:#f92672">(</span><span style="color:#a6e22e">List</span><span style="color:#f92672">.</span>empty<span style="color:#f92672">,</span> x <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

<span style="color:#66d9ef">lazy</span> <span style="color:#66d9ef">val</span> <span style="color:#a6e22e">DrSNumbers</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Stream</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Stream</span><span style="color:#f92672">.</span>from<span style="color:#f92672">(</span><span style="color:#ae81ff">4</span><span style="color:#f92672">).</span>filter<span style="color:#f92672">(</span>i <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">!</span>expandBySum<span style="color:#f92672">(</span>i<span style="color:#f92672">).</span>exists<span style="color:#f92672">(</span>expanded <span style="color:#66d9ef">=&gt;</span> isPrime<span style="color:#f92672">(</span>expanded<span style="color:#f92672">.</span>_1<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> isPrime<span style="color:#f92672">(</span>expanded<span style="color:#f92672">.</span>_2<span style="color:#f92672">)))</span>
</code></pre></div><p>Stream of integers which can not be decompose to sum of two prime numbers.</p>
<ol start="3">
<li>After <code>Dr. P</code> get to know that <code>Dr. P</code> integers bounded he exclaims that he know chosen numbers! Lets go deep in his mind. Looks like <code>Dr. P</code> number factorize in a way that <strong>sum of only one pair</strong> can&rsquo;t be decomposed to sum of two prime numbers. That is only one pair of sum shoulb be in list of possible <code>Dr. S</code> numbers!</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">  <span style="color:#66d9ef">def</span> expandByProduct<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">)]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">var</span> biggestPossibleDivision <span style="color:#66d9ef">=</span> x <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>

    <span style="color:#a6e22e">@tailrec</span> <span style="color:#66d9ef">def</span> helper<span style="color:#f92672">(</span>accum<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">)],</span> i<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[(</span><span style="color:#66d9ef">Int</span>, <span style="color:#66d9ef">Int</span><span style="color:#f92672">)]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">==</span> biggestPossibleDivision<span style="color:#f92672">)</span> <span style="color:#66d9ef">return</span> accum

      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">%</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        biggestPossibleDivision <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>x <span style="color:#f92672">/</span> i <span style="color:#f92672">&lt;=</span> i<span style="color:#f92672">)</span> biggestPossibleDivision <span style="color:#66d9ef">else</span> x <span style="color:#f92672">/</span> i
        helper<span style="color:#f92672">((</span>x <span style="color:#f92672">/</span> i<span style="color:#f92672">,</span> i<span style="color:#f92672">)</span> <span style="color:#66d9ef">:</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">accum</span><span style="color:#f92672">,</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
      <span style="color:#f92672">}</span>
      <span style="color:#66d9ef">else</span> helper<span style="color:#f92672">(</span>accum<span style="color:#f92672">,</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
    <span style="color:#f92672">}</span>
    helper<span style="color:#f92672">(</span><span style="color:#a6e22e">List</span><span style="color:#f92672">.</span>empty<span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">def</span> inDrSNumbers<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">DrSNumbers</span><span style="color:#f92672">.</span>takeWhile<span style="color:#f92672">(</span>valis <span style="color:#66d9ef">=&gt;</span> valis <span style="color:#f92672">&lt;=</span> x<span style="color:#f92672">).</span>contains<span style="color:#f92672">(</span>x<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

<span style="color:#66d9ef">lazy</span> <span style="color:#66d9ef">val</span> <span style="color:#a6e22e">DrPNumbers</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Stream</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Stream</span><span style="color:#f92672">.</span>from<span style="color:#f92672">(</span><span style="color:#ae81ff">4</span><span style="color:#f92672">).</span>filter<span style="color:#f92672">(</span>i <span style="color:#66d9ef">=&gt;</span> expandByProduct<span style="color:#f92672">(</span>i<span style="color:#f92672">).</span>count<span style="color:#f92672">(</span>expanded <span style="color:#66d9ef">=&gt;</span> inValiNumbers<span style="color:#f92672">(</span>expanded<span style="color:#f92672">.</span>_1 <span style="color:#f92672">+</span> expanded<span style="color:#f92672">.</span>_2<span style="color:#f92672">))</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</code></pre></div><p>Factorize integer and check that there is only one pair which sum occurs in <code>Dr. S</code> integers. So we create stream of possible <code>Dr. P</code> integers.</p>
<ol start="4">
<li>Now, after <code>Dr. P</code> said that he get to know chosen integers, <code>Dr. S</code> get to know them too. Formulating how he come to decision is very complex, so think about it by yourself ;) I will only paste code that filters <code>Dr. S</code> integers so both doctors may have solution.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">lazy</span> <span style="color:#66d9ef">val</span> <span style="color:#a6e22e">DrSNumbersWithSolution</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Stream</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">DrSNumbers</span><span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span>valis <span style="color:#66d9ef">=&gt;</span> expandBySum<span style="color:#f92672">(</span>valis<span style="color:#f92672">).</span>map<span style="color:#f92672">(</span>expanded <span style="color:#66d9ef">=&gt;</span> expanded<span style="color:#f92672">.</span>_1 <span style="color:#f92672">*</span> expanded<span style="color:#f92672">.</span>_2<span style="color:#f92672">).</span>count<span style="color:#f92672">(</span>inDrPNumbers<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</code></pre></div><p>Thats all. Lazy stream with all possible pairs of chosen intergers and doctors numbers:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">lazy</span> <span style="color:#66d9ef">val</span> solution<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Stream</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">DrSNumbersWithSolution</span><span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>drs <span style="color:#66d9ef">=&gt;</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">val</span> solution <span style="color:#66d9ef">=</span> expandBySum<span style="color:#f92672">(</span>drs<span style="color:#f92672">).</span>filter<span style="color:#f92672">(</span>expanded <span style="color:#66d9ef">=&gt;</span> inDrSNumbers<span style="color:#f92672">(</span>expanded<span style="color:#f92672">.</span>_1 <span style="color:#f92672">*</span> expanded<span style="color:#f92672">.</span>_2<span style="color:#f92672">)).</span>head
    <span style="color:#e6db74">&#34;DrP number: &#34;</span> <span style="color:#f92672">+</span> solution<span style="color:#f92672">.</span>_1 <span style="color:#f92672">*</span> solution<span style="color:#f92672">.</span>_2 <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;; DrS number: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#f92672">(</span>solution<span style="color:#f92672">.</span>_1 <span style="color:#f92672">+</span> solution<span style="color:#f92672">.</span>_2<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;; solution: &#34;</span> <span style="color:#f92672">+</span> solution<span style="color:#f92672">.</span>_1 <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &amp; &#34;</span> <span style="color:#f92672">+</span> solution<span style="color:#f92672">.</span>_2
<span style="color:#f92672">})</span>
</code></pre></div><p>It is only 4 pairs in range from 1 to 100 that can be chosen.</p>
<p>Some output of functions described above:</p>
<pre><code>println(&quot;DrS possible numbers: &quot; + (DrSNumbers.take(20).toList mkString &quot;, &quot;))
println(&quot;DrP possible numbers: &quot; + (DrPNumbers.take(30).toList mkString &quot;, &quot;))
println(&quot;DrS numbers that give solution to DrP: &quot; + (DrSNumbersWithSolution.take(3).toList mkString &quot;, &quot;))
println(solution.take(3).toList mkString &quot;\n&quot;)

&quot;DrS possible numbers: 11, 17, 23, 27, 29, 35, 37, 41, 47, 51, 53, 57, 59, 65, 67, 71, 77, 79, 83, 87&quot;
&quot;DrP possible numbers: 18, 24, 28, 50, 52, 54, 76, 92, 96, 98, 100, 112, 124, 140, 144, 148, 152, 160, 172, 176, 188, 192, 208, 212, 216, 220, 228, 232, 242, 244&quot;
&quot;DrS numbers that give solution to DrP: 17, 65, 89&quot;

&quot;DrP number: 52; DrS number: 17; solution: 13 &amp; 4&quot;
&quot;DrP number: 244; DrS number: 65; solution: 61 &amp; 4&quot;
&quot;DrP number: 1168; DrS number: 89; solution: 73 &amp; 16&quot;
</code></pre><p><a href="https://github.com/invis87/dva_mudretca/">sources</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
